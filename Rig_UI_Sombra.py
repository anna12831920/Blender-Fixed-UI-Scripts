### RigUI Script generated by Bone Layers Addon ###

import bpy
from bpy.props import PointerProperty
blm_rig_id = "Rig_ID_Sombra"
bpy.context.object.pose.bones["Root"]['_Sombra_Rig_UI'] = bpy.data.texts['Rig_UI_Sombra.py']


# Update Function for Shrinkwrap Targets
def target_update(self, context):
	# List of Bones that hold Shrinkwrap Constraint
	mouth_swrap_bones = [
		"LipUpperOuter.L",
		"LipUpperInner.L",
		"LipCorner.L",
		"LipLowerOuter.L",
		"LipLowerInner.L",
		
		"LipUpperMiddle",
		"LipLowerMiddle",
		
		"LipUpperOuter.R",
		"LipUpperInner.R",
		"LipCorner.R",
		"LipLowerOuter.R",
		"LipLowerInner.R",
		]
	# Go through the bone list and add the Picker Field Object as Constraint Target
	for bone in mouth_swrap_bones:
		try: 
			bpy.data.objects["Sombra_Rig"].pose.bones[bone].constraints["Shrinkwrap Mouth"]
			bpy.data.objects["Sombra_Rig"].pose.bones[bone].constraints["Shrinkwrap Mouth"].target = bpy.context.object.rig_properties_sombra.rig_swrap_target	
		except KeyError:
			print("Bone: "+bone+" has no Shrinkwrap Constraint to apply target to. Skipping.")
			continue

# Create a PropertyGroup to hold Rig Settings
class RigSettings_Sombra(bpy.types.PropertyGroup):
	
	##############################################
	# Add Booleans for UI Checkboxes
	##############################################

	# These guys become Toggle Buttons
	rig_vis_penis: bpy.props.BoolProperty(
		name = "Penis Visibility",
		description = "Toggles Penis Physics. WARNING: Having Penis IK enabled will change the influence of the physics",
		default = False,
		options = {'LIBRARY_EDITABLE'},
		override = {'LIBRARY_OVERRIDABLE'},
		)

	rig_vis_testicles: bpy.props.BoolProperty(
		name = "Testicle Visibility",
		description = "Toggles Testicle Physics",
		default = False,
		options = {'LIBRARY_EDITABLE'},
		override = {'LIBRARY_OVERRIDABLE'},
		)

	# Object Picker Pointer Property
	rig_swrap_target: bpy.props.PointerProperty(
		type = bpy.types.Object,
		update = target_update, 
		name = "Mouth Shrinkwrap Target",
		description = "Switches Mouth Shrinkwrap Target",
		options = {'LIBRARY_EDITABLE'},
		override = {'LIBRARY_OVERRIDABLE'},
		)

class BLOP_PT_rigui_Rig_ID_Sombra(bpy.types.Panel):
	bl_space_type = 'VIEW_3D'
	bl_region_type = 'UI'
	bl_category = 'Item'
	bl_label = "Sombra Rig UI"
	bl_idname = "BLOP_PT_rigui_Rig_ID_Sombra"

	@classmethod
	def poll(self, context):
		try:
			return (context.active_object.data.get("blm_rig_id") == blm_rig_id)
		except (AttributeError, KeyError, TypeError):
			return False

	def draw(self, context):
		layout = self.layout
		col = layout.column()

		row = col.row()
		row.prop(context.active_object.data,'layers', index=0, toggle=True, text='Main')

		row = col.row(align = True)
		row.prop(context.active_object.data,'layers', index=1, toggle=True, text='Head')

		row = col.row(align = True)
		row.prop(context.active_object.data,'layers', index=17, toggle=True, text='Face')

		row = col.row()
		row.prop(context.active_object.data,'layers', index=2, toggle=True, text='Hands')

		row = col.row()
		row.prop(context.active_object.data,'layers', index=15, toggle=True, text='Hair')

		row = col.row()
		row.prop(context.active_object.data,'layers', index=18, toggle=True, text='Breath Ctrl')

		row = col.row()
		row.prop(context.active_object.data,'layers', index=7, toggle=True, text='Armor')
		
		row = col.row()
		row.prop(context.active_object.data,'layers', index=31, toggle=True, text='Strapon')

		row = col.row()
		row.prop(context.active_object.data,'layers', index=25, toggle=True, text='Penis')
		row.prop(context.active_object.data,'layers', index=26, toggle=True, text='Penis IK')
		
		row = col.row()
		row.prop(context.active_object.data,'layers', index=24, toggle=True, text='Root')
		
		row = col.row()
		row.prop(context.active_object.data,'layers', index=16, toggle=True, text='Deformation')


#class BLOP_PT_customprops_Rig_ID_Sombra(bpy.types.Panel):
#	bl_category = 'Item'
#	bl_label = "Rig Properties"
#	bl_idname = "BLOP_PT_customprops_Rig_ID_Sombra"
#	bl_space_type = 'VIEW_3D'
#	bl_region_type = 'UI'
#	bl_options = {'DEFAULT_CLOSED'}

#	@classmethod
#	def poll(self, context):
#		if context.mode != 'POSE':
#			return False

#		try:
#			return (context.active_object.type == 'ARMATURE')
#		except (TypeError):
#			return False

#	def draw(self, context):
#		layout = self.layout
#		pose_bones = context.active_object.pose.bones
#		try:
#			selected_bones = [bone.name for bone in context.selected_pose_bones]
#			selected_bones += [context.active_pose_bone.name]
#		except (AttributeError, TypeError):
#			return

#		def assign_props(row, val, key):
#			row.property = key
#			row.data_path = "active_pose_bone"
#			try:
#				row.value = str(val)
#			except:
#				pass
#		active_pose_bone = context.active_pose_bone

#		rna_properties = {
#			prop.identifier for prop in bpy.types.PoseBone.bl_rna.properties
#			if prop.is_runtime
#		}
#	# Iterate through selected bones add each prop property of each bone to the panel.

#		for bone in context.selected_pose_bones:
#			if len(bone.keys()) > 1:
#				box = layout.box()
#			for key in sorted(bone.keys()):
#				if key != '_RNA_UI' and key not in rna_properties:
#					val = bone.get(key, "value")
#					row = box.row()
#					split = row.split(align=True, factor=0.7)
#					row = split.row(align=True)
#					row.label(text=key, translate=False)
#					row = split.row(align=True)
#					row.prop(bone, f'["{key}"]', text = "", slider=True)

### Custom Properties in Selected Armature ###
class BLOP_PT_staticprops_Rig_ID_Sombra(bpy.types.Panel):
	bl_space_type = 'VIEW_3D'
	bl_region_type = 'UI'
	bl_category = 'Item'
	bl_parent_id = "BLOP_PT_rigui_Rig_ID_Sombra"
	bl_label = "Rig Properties"
	
	def draw(self, context):
		layout = self.layout
		col = layout.column(align = True)
		col.label(text = "Armature", icon = "ARMATURE_DATA")
		row = col.row(align = True)
	 
		col.prop(bpy.data.objects["Sombra_Rig"].pose.bones["Root"], '["Armature Hand control"]', text = "Hand CTRL" )
		col.prop(bpy.data.objects["Sombra_Rig"].pose.bones["Root"], '["Armature Spine control"]', text = "Spine CTRL" )
		col.prop(bpy.data.objects["Sombra_Rig"].pose.bones["Root"], '["Armature Head control"]', text = "Head CTRL" )
		col.prop(bpy.data.objects["Sombra_Rig"].pose.bones["Root"], '["Armature Sticky eyelids"]', text = "Sticky Eyelids" )
		col.prop(bpy.data.objects["Sombra_Rig"].pose.bones["Root"], '["Armature Penis IK"]', text = "Penis IK", slider = True )
		
		col = layout.column(align = True)
		col.label(text = "Body", icon = "FULLSCREEN_ENTER")
		row = col.row()
		col.prop(bpy.data.objects["Sombra_Rig"].pose.bones["Root"], '["Body Breast size 1"]', text = "Breast Size 1", slider = True )
		col.prop(bpy.data.objects["Sombra_Rig"].pose.bones["Root"], '["Body Breast size 2"]', text = "Breast Size 2" , slider = True)
		col.prop(bpy.data.objects["Sombra_Rig"].pose.bones["Root"], '["Body Glutes size"]', text = "Glutes Size" , slider = True)
		col.prop(bpy.data.objects["Sombra_Rig"].pose.bones["Root"], '["Body Thighs size"]', text = "Thighs Size" , slider = True)
		col.prop(bpy.data.objects["Sombra_Rig"].pose.bones["Root"], '["Body Preserve Volume"]', text = "Preserve Volume" )
		col.prop(bpy.data.objects["Sombra_Rig"].pose.bones["Root"], '["Body Futanari"]', text = "Futanari" )
		
		
		col = layout.column(align = True)
		col.label(text = "Clothing", icon = "MOD_CLOTH")
		col.row().prop(bpy.data.objects["Sombra_Rig"].pose.bones["Root"], '["Clothes - Standard set"]', text = "Standard Set" )
		col.row().prop(bpy.data.objects["Sombra_Rig"].pose.bones["Root"], '["Clothes - Top"]', text = "Top" )
		col.row().prop(bpy.data.objects["Sombra_Rig"].pose.bones["Root"], '["Clothes - Bottom"]', text = "Bottom" )
		col.row().prop(bpy.data.objects["Sombra_Rig"].pose.bones["Root"], '["Clothes - Gloves"]', text = "Gloves" )
		col.row().prop(bpy.data.objects["Sombra_Rig"].pose.bones["Root"], '["Clothes - Stockings"]', text = "Stockings" )
		col.row().prop(bpy.data.objects["Sombra_Rig"].pose.bones["Root"], '["Clothes - Shoes"]', text = "Shoes" )
		col.row().prop(bpy.data.objects["Sombra_Rig"].pose.bones["Root"], '["Clothes - Necklace"]', text = "Necklace" )
		col.row().prop(bpy.data.objects["Sombra_Rig"].pose.bones["Root"], '["Clothes - Bracelets"]', text = "Bracelets" )
		col.row().prop(bpy.data.objects["Sombra_Rig"].pose.bones["Root"], '["Glasses"]', text = "Glasses" )
		col.row().prop(bpy.data.objects["Sombra_Rig"].pose.bones["Root"], '["Clothes - Swimsuit"]', text = "Swimsuit" )
		col.row().prop(bpy.data.objects["Sombra_Rig"].pose.bones["Root"], '["Clothes - Lingerie"]', text = "Lingerie" )
		
		col = layout.column(align = True)
		col.label(text = "Weapons", icon = "RIGHTARROW")
		col.row().prop(bpy.data.objects["Sombra_Rig"].pose.bones["Root"], '["Weapon - SMG"]', text = "Machine Pistol" )
		col.row().prop(bpy.data.objects["Sombra_Rig"].pose.bones["Root"], '["Weapon - Translocator"]', text = "Tranlocator" )
		

class BLOP_PT_Properties_Physics_Sombra(bpy.types.Panel):
	bl_space_type = 'VIEW_3D'
	bl_region_type = 'UI'
	bl_category = 'Item'
	bl_parent_id = "BLOP_PT_rigui_Rig_ID_Sombra"
	bl_label = "Physics"
	
	def draw(self, context):
		layout = self.layout
		col = layout.column()   
		row = col.row()
		#Variables
		property_bone = bpy.context.object.pose.bones["Root"]
		rig_properties = bpy.context.object.rig_properties_sombra # Stores path to the Properties stored in the PropertyGroup
		spacing_short = 0.8 # Panel Padding, short value
		spacing_wide = 1.2 # Panel Padding, wide value

		layout = self.layout
		
		col = layout.column(align = True)		
		# Add Object Picker for Mouth Shrinkwrap
		col.label(text="Mouth Shrink Wrap Target")
		col.prop(rig_properties, "rig_swrap_target", icon = "PIVOT_CURSOR", text="")

		# Toggle Icon Checks
		icon_penis = ("HIDE_ON","HIDE_OFF")[rig_properties.rig_vis_penis]
		icon_testicles = ("HIDE_ON","HIDE_OFF")[rig_properties.rig_vis_testicles]

		col = layout.column(align = True)
		row = col.row(align = True)
		row.prop(rig_properties, 'rig_vis_penis', text='Penis', icon = icon_penis)
		row.prop(rig_properties, 'rig_vis_testicles', text='Testicles', icon = icon_testicles)
#		col.row().prop(bpy.data.objects["Sombra_Rig"].pose.bones["Root"], '["Physics - Penis"]', text = "Penis" )
#		col.row().prop(bpy.data.objects["Sombra_Rig"].pose.bones["Root"], '["Physics - Balls"]', text = "Testicles" )
	

class BLOP_PT_Properties_EXTRA_Sombra(bpy.types.Panel):
	bl_space_type = 'VIEW_3D'
	bl_region_type = 'UI'
	bl_category = 'Item'
	bl_parent_id = "BLOP_PT_rigui_Rig_ID_Sombra"
	bl_label = "Extras"
	
	def draw(self, context):
		layout = self.layout
		col = layout.column()
	 
		
		row = col.row()
		cur_scene = bpy.context.window.scene
		row.prop(cur_scene.render, 'use_simplify', icon = "MOD_SIMPLIFY", text='Simplify')
		
		row = col.row()
		row.prop(context.active_object, 'show_in_front', icon = "GROUP_BONE", text='In Front')



classes = (BLOP_PT_rigui_Rig_ID_Sombra, 
			RigSettings_Sombra,
#			BLOP_PT_customprops_Rig_ID_Sombra,
			BLOP_PT_staticprops_Rig_ID_Sombra,
			BLOP_PT_Properties_Physics_Sombra,
			BLOP_PT_Properties_EXTRA_Sombra,
			 )

def register():
	from bpy.utils import register_class
	for cls in classes:
		register_class(cls) 
	bpy.types.Object.rig_properties_sombra = bpy.props.PointerProperty(type = RigSettings_Sombra)


def unregister():
	from bpy.utils import unregister_class
	for cls in reversed(classes):
		unregister_class(cls)
	del bpy.types.Object.rig_properties_sombra

register()
